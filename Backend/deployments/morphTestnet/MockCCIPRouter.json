{
  "address": "0x1B5E93339955383d258aC5881F71AfF837A5933f",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "CCIPSendRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "sourceChainSelector",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "MessageExecuted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MOCK_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainSelector",
          "type": "uint64"
        }
      ],
      "name": "addSupportedChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "receiver",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct MockCCIPRouter.EVMTokenAmount[]",
              "name": "tokenAmounts",
              "type": "tuple[]"
            },
            {
              "internalType": "address",
              "name": "feeToken",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "extraArgs",
              "type": "bytes"
            }
          ],
          "internalType": "struct MockCCIPRouter.EVM2AnyMessage",
          "name": "message",
          "type": "tuple"
        }
      ],
      "name": "ccipSend",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "executedMessages",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "receiver",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct MockCCIPRouter.EVMTokenAmount[]",
              "name": "tokenAmounts",
              "type": "tuple[]"
            },
            {
              "internalType": "address",
              "name": "feeToken",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "extraArgs",
              "type": "bytes"
            }
          ],
          "internalType": "struct MockCCIPRouter.EVM2AnyMessage",
          "name": "message",
          "type": "tuple"
        }
      ],
      "name": "getFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainSelector",
          "type": "uint64"
        }
      ],
      "name": "isChainSupported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "sourceChainSelector",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mockReceiveMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "supportedChains",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x73b71fe6965e08866ee82304993d64dda796e21399bd0f8d2caaa3115e353fb2",
  "receipt": {
    "to": null,
    "from": "0xbc3683737f55f9C6E37cD74d04F345c586C5a3aE",
    "contractAddress": "0x1B5E93339955383d258aC5881F71AfF837A5933f",
    "transactionIndex": 0,
    "gasUsed": "638715",
    "logsBloom": "0x
    "blockHash": "0x4a729ee1b2ddf3bfbad167680d221e66b083a965455407b97298ae915edfa441",
    "transactionHash": "0x73b71fe6965e08866ee82304993d64dda796e21399bd0f8d2caaa3115e353fb2",
    "logs": [],
    "blockNumber": 19006830,
    "cumulativeGasUsed": "638715",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "5a88b122744be0410a3fbcf117988cb8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"CCIPSendRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"MessageExecuted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MOCK_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"addSupportedChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"receiver\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct MockCCIPRouter.EVMTokenAmount[]\",\"name\":\"tokenAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraArgs\",\"type\":\"bytes\"}],\"internalType\":\"struct MockCCIPRouter.EVM2AnyMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"ccipSend\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"executedMessages\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"receiver\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct MockCCIPRouter.EVMTokenAmount[]\",\"name\":\"tokenAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraArgs\",\"type\":\"bytes\"}],\"internalType\":\"struct MockCCIPRouter.EVM2AnyMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"isChainSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mockReceiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"supportedChains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Mock CCIP Router for testing on Morph testnet\",\"kind\":\"dev\",\"methods\":{\"addSupportedChain(uint64)\":{\"details\":\"Add supported chain (admin function)\"},\"ccipSend(uint64,(bytes,bytes,(address,uint256)[],address,bytes))\":{\"details\":\"Mock function to simulate sending a CCIP message\"},\"getFee(uint64,(bytes,bytes,(address,uint256)[],address,bytes))\":{\"details\":\"Mock function to get the fee for sending a message\"},\"isChainSupported(uint64)\":{\"details\":\"Check if a chain is supported\"},\"mockReceiveMessage(bytes32,uint64,address,address,bytes)\":{\"details\":\"Mock function to simulate receiving a CCIP message\"},\"withdrawFees()\":{\"details\":\"Withdraw collected fees (for testing)\"}},\"title\":\"MockCCIPRouter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This is a mock contract for testing purposes only WARNING: This is NOT a real CCIP Router - Morph testnet does not have Chainlink CCIP support\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MockCCIPRouter.sol\":\"MockCCIPRouter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"contracts/MockCCIPRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title MockCCIPRouter\\r\\n * @dev Mock CCIP Router for testing on Morph testnet\\r\\n * @notice This is a mock contract for testing purposes only\\r\\n * WARNING: This is NOT a real CCIP Router - Morph testnet does not have Chainlink CCIP support\\r\\n */\\r\\ncontract MockCCIPRouter {\\r\\n    event CCIPSendRequested(\\r\\n        uint64 indexed destinationChainSelector,\\r\\n        address indexed receiver,\\r\\n        bytes data,\\r\\n        address indexed sender\\r\\n    );\\r\\n\\r\\n    event MessageExecuted(\\r\\n        bytes32 indexed messageId,\\r\\n        uint64 indexed sourceChainSelector,\\r\\n        address indexed sender,\\r\\n        address receiver,\\r\\n        bytes data\\r\\n    );\\r\\n\\r\\n    struct EVM2AnyMessage {\\r\\n        bytes receiver;\\r\\n        bytes data;\\r\\n        EVMTokenAmount[] tokenAmounts;\\r\\n        address feeToken;\\r\\n        bytes extraArgs;\\r\\n    }\\r\\n\\r\\n    struct EVMTokenAmount {\\r\\n        address token;\\r\\n        uint256 amount;\\r\\n    }\\r\\n    \\r\\n    // \\u2705 ADDED: Missing struct that was causing the compilation error\\r\\n    struct Any2EVMMessage {\\r\\n        bytes32 messageId;\\r\\n        uint64 sourceChainSelector;\\r\\n        bytes sender;\\r\\n        bytes data;\\r\\n        EVMTokenAmount[] tokenAmounts;\\r\\n    }\\r\\n    \\r\\n    mapping(uint64 => bool) public supportedChains;\\r\\n    mapping(bytes32 => bool) public executedMessages;\\r\\n    \\r\\n    uint256 public constant MOCK_FEE = 0.001 ether;\\r\\n    uint256 private messageIdCounter = 1;\\r\\n\\r\\n    constructor() {\\r\\n        // Add all chains that your frontend supports\\r\\n        supportedChains[2810] = true; // Morph testnet\\r\\n        supportedChains[16015286601757825753] = true; // Ethereum Sepolia\\r\\n        supportedChains[10344971235874465080] = true; // BSC Testnet\\r\\n        supportedChains[14767482510784806043] = true; // Avalanche Fuji\\r\\n        supportedChains[3478487238524512106] = true; // Arbitrum Sepolia\\r\\n        supportedChains[5224473277236331295] = true; // Optimism Sepolia\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mock function to simulate sending a CCIP message\\r\\n     */\\r\\n    function ccipSend(\\r\\n        uint64 destinationChainSelector,\\r\\n        EVM2AnyMessage calldata message\\r\\n    ) external payable returns (bytes32) {\\r\\n        require(supportedChains[destinationChainSelector], \\\"Unsupported chain\\\");\\r\\n        require(msg.value >= MOCK_FEE, \\\"Insufficient fee\\\");\\r\\n\\r\\n        bytes32 messageId = keccak256(abi.encodePacked(messageIdCounter++, block.timestamp, msg.sender));\\r\\n        \\r\\n        emit CCIPSendRequested(\\r\\n            destinationChainSelector,\\r\\n            abi.decode(message.receiver, (address)),\\r\\n            message.data,\\r\\n            msg.sender\\r\\n        );\\r\\n\\r\\n        return messageId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mock function to get the fee for sending a message\\r\\n     */\\r\\n    function getFee(\\r\\n        uint64 destinationChainSelector,\\r\\n        EVM2AnyMessage calldata message\\r\\n    ) external view returns (uint256) {\\r\\n        require(supportedChains[destinationChainSelector], \\\"Unsupported chain\\\");\\r\\n        return MOCK_FEE;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mock function to simulate receiving a CCIP message\\r\\n     */\\r\\n    function mockReceiveMessage(\\r\\n        bytes32 messageId,\\r\\n        uint64 sourceChainSelector,\\r\\n        address sender,\\r\\n        address receiver,\\r\\n        bytes calldata data\\r\\n    ) external {\\r\\n        require(!executedMessages[messageId], \\\"Message already executed\\\");\\r\\n        executedMessages[messageId] = true;\\r\\n\\r\\n        emit MessageExecuted(messageId, sourceChainSelector, sender, receiver, data);\\r\\n        \\r\\n        // In a real implementation, this would call the receiver's ccipReceive function\\r\\n        // For testing, we just emit the event\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add supported chain (admin function)\\r\\n     */\\r\\n    function addSupportedChain(uint64 chainSelector) external {\\r\\n        supportedChains[chainSelector] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if a chain is supported\\r\\n     */\\r\\n    function isChainSupported(uint64 chainSelector) external view returns (bool) {\\r\\n        return supportedChains[chainSelector];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw collected fees (for testing)\\r\\n     */\\r\\n    function withdrawFees() external {\\r\\n        payable(msg.sender).transfer(address(this).balance);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x278d0062e7408522f17469fcbe91da66fcdc2a110fdf90bdf36e77bf8d57013f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600160025534801561001557600080fd5b50600060208190527fa9a448e91a322ec696947a25e9589b9482d3c29d727a0886e15ca89f38d53fdf805460ff1990811660019081179092557fd7402d8a7198838e4e7effc0224fa49c233309a7547ed13c3f0ff80ac8631aa580548216831790557fcfbdccba3494f8c6632a3d964e4e1a2e14aa0650d25a0d382c15b07a0764dce780548216831790557f5a072f562db85e920d3cb5cb90deb73dda1ba390e107311c7f09f901212041fb80548216831790557fd596cc79e65e9585db57ce60b9fda4d5b5c2892dd38df07272dbe4ac2e33e57580548216831790556748810ec3e431431f9092527fea991d314abb8e64332483bb3ef91e04e081de4125c2389adfe668812cc6669b80549092161790556107b6806101366000396000f3fe6080604052600436106100865760003560e01c806396f4e9f91161005957806396f4e9f914610110578063a48a905814610123578063cd2abd661461016d578063f9c3f3321461019d578063fb5c3312146101cd57600080fd5b806320487ded1461008b5780633367d425146100be578063476343ee146100e0578063540c1ac8146100f5575b600080fd5b34801561009757600080fd5b506100ab6100a6366004610525565b61020d565b6040519081526020015b60405180910390f35b3480156100ca57600080fd5b506100de6100d936600461058f565b61027e565b005b3480156100ec57600080fd5b506100de610355565b34801561010157600080fd5b506100ab66038d7ea4c6800081565b6100ab61011e366004610525565b610384565b34801561012f57600080fd5b5061015d61013e366004610640565b67ffffffffffffffff1660009081526020819052604090205460ff1690565b60405190151581526020016100b5565b34801561017957600080fd5b5061015d610188366004610662565b60016020526000908152604090205460ff1681565b3480156101a957600080fd5b5061015d6101b8366004610640565b60006020819052908152604090205460ff1681565b3480156101d957600080fd5b506100de6101e8366004610640565b67ffffffffffffffff166000908152602081905260409020805460ff19166001179055565b67ffffffffffffffff821660009081526020819052604081205460ff1661026f5760405162461bcd60e51b81526020600482015260116024820152702ab739bab83837b93a32b21031b430b4b760791b60448201526064015b60405180910390fd5b5066038d7ea4c6800092915050565b60008681526001602052604090205460ff16156102dd5760405162461bcd60e51b815260206004820152601860248201527f4d65737361676520616c726561647920657865637574656400000000000000006044820152606401610266565b600086815260016020819052604091829020805460ff19169091179055516001600160a01b0385169067ffffffffffffffff87169088907f96763dfb1739e559fce7debb78eb8858388fb0bd2101fa3bb16cc38e47b5b7be90610345908890889088906106a4565b60405180910390a4505050505050565b60405133904780156108fc02916000818181858888f19350505050158015610381573d6000803e3d6000fd5b50565b67ffffffffffffffff821660009081526020819052604081205460ff166103e15760405162461bcd60e51b81526020600482015260116024820152702ab739bab83837b93a32b21031b430b4b760791b6044820152606401610266565b66038d7ea4c6800034101561042b5760405162461bcd60e51b815260206004820152601060248201526f496e73756666696369656e742066656560801b6044820152606401610266565b600280546000918261043c836106d2565b91905055423360405160200161047793929190928352602083019190915260601b6bffffffffffffffffffffffff1916604082015260540190565b60408051601f19818403018152919052805160209091012090503361049c84806106f9565b8101906104a99190610747565b6001600160a01b031667ffffffffffffffff86167f4452a7d46672e5639e092df0efaeaffcda66ebc9e638c12be11502120f3e6c5f6104eb60208801886106f9565b6040516104f9929190610764565b60405180910390a49392505050565b803567ffffffffffffffff8116811461052057600080fd5b919050565b6000806040838503121561053857600080fd5b61054183610508565b9150602083013567ffffffffffffffff81111561055d57600080fd5b830160a0818603121561056f57600080fd5b809150509250929050565b6001600160a01b038116811461038157600080fd5b60008060008060008060a087890312156105a857600080fd5b863595506105b860208801610508565b945060408701356105c88161057a565b935060608701356105d88161057a565b9250608087013567ffffffffffffffff808211156105f557600080fd5b818901915089601f83011261060957600080fd5b81358181111561061857600080fd5b8a602082850101111561062a57600080fd5b6020830194508093505050509295509295509295565b60006020828403121561065257600080fd5b61065b82610508565b9392505050565b60006020828403121561067457600080fd5b5035919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b03841681526040602082018190526000906106c9908301848661067b565b95945050505050565b6000600182016106f257634e487b7160e01b600052601160045260246000fd5b5060010190565b6000808335601e1984360301811261071057600080fd5b83018035915067ffffffffffffffff82111561072b57600080fd5b60200191503681900382131561074057600080fd5b9250929050565b60006020828403121561075957600080fd5b813561065b8161057a565b60208152600061077860208301848661067b565b94935050505056fea264697066735822122012b5e06aa6dff9fb0644705ee067ae416851b82607ad79b0f8fc94ebf3850dc864736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c806396f4e9f91161005957806396f4e9f914610110578063a48a905814610123578063cd2abd661461016d578063f9c3f3321461019d578063fb5c3312146101cd57600080fd5b806320487ded1461008b5780633367d425146100be578063476343ee146100e0578063540c1ac8146100f5575b600080fd5b34801561009757600080fd5b506100ab6100a6366004610525565b61020d565b6040519081526020015b60405180910390f35b3480156100ca57600080fd5b506100de6100d936600461058f565b61027e565b005b3480156100ec57600080fd5b506100de610355565b34801561010157600080fd5b506100ab66038d7ea4c6800081565b6100ab61011e366004610525565b610384565b34801561012f57600080fd5b5061015d61013e366004610640565b67ffffffffffffffff1660009081526020819052604090205460ff1690565b60405190151581526020016100b5565b34801561017957600080fd5b5061015d610188366004610662565b60016020526000908152604090205460ff1681565b3480156101a957600080fd5b5061015d6101b8366004610640565b60006020819052908152604090205460ff1681565b3480156101d957600080fd5b506100de6101e8366004610640565b67ffffffffffffffff166000908152602081905260409020805460ff19166001179055565b67ffffffffffffffff821660009081526020819052604081205460ff1661026f5760405162461bcd60e51b81526020600482015260116024820152702ab739bab83837b93a32b21031b430b4b760791b60448201526064015b60405180910390fd5b5066038d7ea4c6800092915050565b60008681526001602052604090205460ff16156102dd5760405162461bcd60e51b815260206004820152601860248201527f4d65737361676520616c726561647920657865637574656400000000000000006044820152606401610266565b600086815260016020819052604091829020805460ff19169091179055516001600160a01b0385169067ffffffffffffffff87169088907f96763dfb1739e559fce7debb78eb8858388fb0bd2101fa3bb16cc38e47b5b7be90610345908890889088906106a4565b60405180910390a4505050505050565b60405133904780156108fc02916000818181858888f19350505050158015610381573d6000803e3d6000fd5b50565b67ffffffffffffffff821660009081526020819052604081205460ff166103e15760405162461bcd60e51b81526020600482015260116024820152702ab739bab83837b93a32b21031b430b4b760791b6044820152606401610266565b66038d7ea4c6800034101561042b5760405162461bcd60e51b815260206004820152601060248201526f496e73756666696369656e742066656560801b6044820152606401610266565b600280546000918261043c836106d2565b91905055423360405160200161047793929190928352602083019190915260601b6bffffffffffffffffffffffff1916604082015260540190565b60408051601f19818403018152919052805160209091012090503361049c84806106f9565b8101906104a99190610747565b6001600160a01b031667ffffffffffffffff86167f4452a7d46672e5639e092df0efaeaffcda66ebc9e638c12be11502120f3e6c5f6104eb60208801886106f9565b6040516104f9929190610764565b60405180910390a49392505050565b803567ffffffffffffffff8116811461052057600080fd5b919050565b6000806040838503121561053857600080fd5b61054183610508565b9150602083013567ffffffffffffffff81111561055d57600080fd5b830160a0818603121561056f57600080fd5b809150509250929050565b6001600160a01b038116811461038157600080fd5b60008060008060008060a087890312156105a857600080fd5b863595506105b860208801610508565b945060408701356105c88161057a565b935060608701356105d88161057a565b9250608087013567ffffffffffffffff808211156105f557600080fd5b818901915089601f83011261060957600080fd5b81358181111561061857600080fd5b8a602082850101111561062a57600080fd5b6020830194508093505050509295509295509295565b60006020828403121561065257600080fd5b61065b82610508565b9392505050565b60006020828403121561067457600080fd5b5035919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b03841681526040602082018190526000906106c9908301848661067b565b95945050505050565b6000600182016106f257634e487b7160e01b600052601160045260246000fd5b5060010190565b6000808335601e1984360301811261071057600080fd5b83018035915067ffffffffffffffff82111561072b57600080fd5b60200191503681900382131561074057600080fd5b9250929050565b60006020828403121561075957600080fd5b813561065b8161057a565b60208152600061077860208301848661067b565b94935050505056fea264697066735822122012b5e06aa6dff9fb0644705ee067ae416851b82607ad79b0f8fc94ebf3850dc864736f6c63430008180033",
  "devdoc": {
    "details": "Mock CCIP Router for testing on Morph testnet",
    "kind": "dev",
    "methods": {
      "addSupportedChain(uint64)": {
        "details": "Add supported chain (admin function)"
      },
      "ccipSend(uint64,(bytes,bytes,(address,uint256)[],address,bytes))": {
        "details": "Mock function to simulate sending a CCIP message"
      },
      "getFee(uint64,(bytes,bytes,(address,uint256)[],address,bytes))": {
        "details": "Mock function to get the fee for sending a message"
      },
      "isChainSupported(uint64)": {
        "details": "Check if a chain is supported"
      },
      "mockReceiveMessage(bytes32,uint64,address,address,bytes)": {
        "details": "Mock function to simulate receiving a CCIP message"
      },
      "withdrawFees()": {
        "details": "Withdraw collected fees (for testing)"
      }
    },
    "title": "MockCCIPRouter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This is a mock contract for testing purposes only WARNING: This is NOT a real CCIP Router - Morph testnet does not have Chainlink CCIP support",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1153,
        "contract": "contracts/MockCCIPRouter.sol:MockCCIPRouter",
        "label": "supportedChains",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint64,t_bool)"
      },
      {
        "astId": 1157,
        "contract": "contracts/MockCCIPRouter.sol:MockCCIPRouter",
        "label": "executedMessages",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 1163,
        "contract": "contracts/MockCCIPRouter.sol:MockCCIPRouter",
        "label": "messageIdCounter",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint64,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}